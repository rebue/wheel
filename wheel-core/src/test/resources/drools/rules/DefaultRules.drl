package drools.rules;

import java.util.Map;
import rebue.wheel.core.fact.RequestFact;

function void rename(Map body, String oldName, String newName){
    body.put(newName, body.get(oldName));
    body.remove(oldName);
}

rule abc
    no-loop true        // 防止死循环(当规则通过update之类的函数修改了Fact对象时，可能使当前规则再次被激活从而导致死循环)
    lock-on-active true // 限制当前规则只会被执行一次(包括当前规则的重复执行不是本身触发的)
when
    $fact: RequestFact(uri=="/abc", $body: body)
then
    $body.remove("a");
    $body.remove("b");
    $body.put("c", "CCCCC");
    $body.put("d", "DDDDD");
    $body.put("h", "HHHHH");
    $body.put("i", "IIIII");
    $body.put("j", $body.get("c"));
    $body.put("k", $body.get("e"));
    rename($body, "e", "l");
    System.out.println("ABC OK!");
    update($fact)
end

rule def
    no-loop true        // 防止死循环(当规则通过update之类的函数修改了Fact对象时，可能使当前规则再次被激活从而导致死循环)
    lock-on-active true // 限制当前规则只会被执行一次(包括当前规则的重复执行不是本身触发的)
when
    RequestFact(uri=="/def")
then
    System.out.println("DEF OK!");
end

rule ghi
    no-loop true        // 防止死循环(当规则通过update之类的函数修改了Fact对象时，可能使当前规则再次被激活从而导致死循环)
    lock-on-active true // 限制当前规则只会被执行一次(包括当前规则的重复执行不是本身触发的)
when
    RequestFact(uri=="/ghi")
then
    System.out.println("GHI OK!");
end
